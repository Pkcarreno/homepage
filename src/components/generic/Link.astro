---
import path from 'node:path'

import type { HTMLAttributes } from 'astro/types'

import { cn } from '@/utils'

type Props = HTMLAttributes<'a'> & {
  unstyled?: boolean
}

const { href, class: className, ...props } = Astro.props

const { pathname } = Astro.url

const dir = typeof href === 'string' ? href : href ? href.toString() : ''

const isExternal = URL.canParse(dir) ? true : undefined
const isHash = dir.startsWith('#') ? true : undefined
const isMail = dir.startsWith('mailto:') ? true : undefined
const isTel = dir.startsWith('tel:') ? true : undefined
const isInternal =
  !isExternal && !isHash && !isMail && !isTel ? true : undefined
const isActive =
  isInternal &&
  (dir === pathname ||
    dir === `${pathname}/` ||
    `${dir}/` === pathname ||
    dir === '.' ||
    dir === './')
    ? true
    : undefined

let contact: string | undefined = undefined
if (isMail) {
  contact = dir.replace('mailto:', '')
} else if (isTel) {
  contact = dir.replace('tel:', '')
}

let parsedUrl = dir
if (isExternal !== true && isHash !== true) {
  const basePrefix = import.meta.env.BASE_URL

  parsedUrl = path.isAbsolute(dir)
    ? `${path.join(basePrefix ?? '/', dir)}`
    : dir
}

let dataContact: string | null = null
if (contact) {
  parsedUrl = '#'
  dataContact = btoa(dir)
}

const uniqueId = dataContact
  ? `link-${Math.random().toString(16).slice(2)}`
  : undefined

const relValue = props.rel
  ? props.rel
  : isExternal
    ? 'noopener nofollow'
    : isInternal && !isActive
      ? 'prefetch'
      : undefined

const defaultStyles =
  'hover:bg-foreground hover:text-background size-fit underline decoration-dotted underline-offset-2 hover:no-underline'

const activeLinkStyles =
  'data-[is-active=true]:bg-muted data-[is-active=true]:text-muted-foreground data-[is-active=true]:hover:text-muted-foreground/70 data-[is-active=true]:decoration-solid'

const attributes = {
  href: parsedUrl,
  class: cn(
    !props.unstyled && defaultStyles,
    !props.unstyled && activeLinkStyles,
    className
  ),
  'unique-id': uniqueId,
  'data-contact': dataContact,
  'data-is-external': isExternal,
  'data-is-internal': isInternal,
  'data-is-hash': isHash,
  'data-is-mail': isMail,
  'data-is-tel': isTel,
  'data-is-active': isActive,
  rel: relValue,
  ...props
}
---

<>
  <a {...attributes}><slot /></a>
</>

{
  dataContact && (
    <script>
      const anchorElements = document.querySelectorAll('a[unique-id]')
      anchorElements.forEach(anchor =>
      {anchor.addEventListener('click', e => {
        e.preventDefault()

        const contactHrefRaw = anchor.getAttribute('data-contact')
        if (contactHrefRaw) {
          const contactHref = atob(contactHrefRaw)
          window.location.href = contactHref
        }
      })}
      )
    </script>
  )
}
