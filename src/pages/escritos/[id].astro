---
import type { CollectionEntry } from 'astro:content'
import { getCollection, render } from 'astro:content'

import Link from '@/components/ui/Link.astro'
import Layout from '@/layouts/Layout.astro'

type entryType = CollectionEntry<'escritos'>

export async function getStaticPaths() {
  const writeEntries = await getCollection('escritos')
  return writeEntries
    .filter(
      (entry: entryType) =>
        process.env.NODE_ENV === 'development' || !entry.data.draft
    )
    .sort(
      (entryA: entryType, entryB: entryType) =>
        new Date(entryB.data.pubDate).getTime() -
        new Date(entryA.data.pubDate).getTime()
    )
    .map((entry: entryType) => ({
      params: { id: entry.slug },
      props: { entry }
    }))
}

interface Props {
  entry: entryType
}

const { entry } = Astro.props
const { Content } = await render(entry)
---

<Layout
  title={`${entry.data.title}${entry.data.draft ? ' (draft)' : ''}`}
  description={entry.data.description}
>
  <Content />

  <br />

  {
    entry.data.tags && (
      <div class="flex flex-col gap-0.5">
        <small>
          Este escrito fue publicado el{' '}
          <b>{entry.data.pubDate.toLocaleDateString()}</b> y fue actualizado por
          Ãºltima vez el <b>{entry.data.lastMod.toLocaleDateString()}</b>.
          {entry.data.tags &&
            entry.data.tags.length > 0 &&
            ' Contiene las etiquetas: '}
          {entry.data.tags &&
            entry.data.tags.length > 0 &&
            entry.data.tags.map(tag => {
              return (
                <Link class="capitalize" href={`/etiqueta/${tag}`}>
                  {`${tag}`}
                </Link>
              )
            })}
        </small>
      </div>
    )
  }
</Layout>
